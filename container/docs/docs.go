// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/v1/auth/github/reset": {
            "post": {
                "description": "Clears any active authentication process",
                "tags": [
                    "auth"
                ],
                "summary": "Reset authentication state",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/v1/auth/github/start": {
            "post": {
                "description": "Initiates GitHub device flow authentication",
                "tags": [
                    "auth"
                ],
                "summary": "Start GitHub authentication",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_handlers.AuthStartResponse"
                        }
                    }
                }
            }
        },
        "/v1/auth/github/status": {
            "get": {
                "description": "Returns the current status of the authentication flow",
                "tags": [
                    "auth"
                ],
                "summary": "Get authentication status",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_handlers.AuthStatusResponse"
                        }
                    }
                }
            }
        },
        "/v1/claude/hooks": {
            "post": {
                "description": "Receives hook notifications from Claude Code for activity tracking",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "claude"
                ],
                "summary": "Handle Claude hook events",
                "parameters": [
                    {
                        "description": "Claude hook event",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_vanpelt_catnip_internal_models.ClaudeHookEvent"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/v1/claude/messages": {
            "post": {
                "description": "Creates a completion using the claude CLI tool as a subprocess, supporting both streaming and non-streaming responses, with resume functionality",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "claude"
                ],
                "summary": "Create Claude messages using CLI",
                "parameters": [
                    {
                        "description": "Create completion request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_vanpelt_catnip_internal_models.CreateCompletionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_vanpelt_catnip_internal_models.CreateCompletionResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/v1/claude/session": {
            "get": {
                "description": "Returns Claude Code session metadata for a specific worktree",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "claude"
                ],
                "summary": "Get worktree session summary",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Worktree path",
                        "name": "worktree_path",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_vanpelt_catnip_internal_models.ClaudeSessionSummary"
                        }
                    }
                }
            }
        },
        "/v1/claude/session/{uuid}": {
            "get": {
                "description": "Returns complete session data including all messages for a specific session UUID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "claude"
                ],
                "summary": "Get session by UUID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Session UUID",
                        "name": "uuid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_vanpelt_catnip_internal_models.FullSessionData"
                        }
                    }
                }
            }
        },
        "/v1/claude/sessions": {
            "get": {
                "description": "Returns Claude Code session metadata for all worktrees with Claude data",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "claude"
                ],
                "summary": "Get all worktree session summaries",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "$ref": "#/definitions/github_com_vanpelt_catnip_internal_models.ClaudeSessionSummary"
                            }
                        }
                    }
                }
            }
        },
        "/v1/claude/settings": {
            "get": {
                "description": "Returns Claude Code configuration settings including theme, authentication status, and other metadata",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "claude"
                ],
                "summary": "Get Claude settings",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_vanpelt_catnip_internal_models.ClaudeSettings"
                        }
                    }
                }
            },
            "put": {
                "description": "Updates Claude Code configuration settings (theme and notifications)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "claude"
                ],
                "summary": "Update Claude settings",
                "parameters": [
                    {
                        "description": "Settings update request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_vanpelt_catnip_internal_models.ClaudeSettingsUpdateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_vanpelt_catnip_internal_models.ClaudeSettings"
                        }
                    }
                }
            }
        },
        "/v1/claude/todos": {
            "get": {
                "description": "Returns the most recent TodoWrite structure from Claude Code session for a specific worktree",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "claude"
                ],
                "summary": "Get worktree todos",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Worktree path",
                        "name": "worktree_path",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/github_com_vanpelt_catnip_internal_models.Todo"
                            }
                        }
                    }
                }
            }
        },
        "/v1/events": {
            "get": {
                "description": "Streams real-time events in Server-Sent Events format. Events include port changes, git status, processes, and container status updates.\n\n## Event Types\n\n### Port Events\n- **port:opened**: Fired when a new port is detected\n- ` + "`" + `port` + "`" + ` (int): Port number\n- ` + "`" + `service` + "`" + ` (string): Service type (http, tcp)\n- ` + "`" + `protocol` + "`" + ` (string): Protocol used\n- ` + "`" + `title` + "`" + ` (string): Service title/name if detected\n- **port:closed**: Fired when a port is no longer available\n- ` + "`" + `port` + "`" + ` (int): Port number that was closed\n\n### Git Events\n- **git:dirty**: Fired when git workspace has uncommitted changes\n- ` + "`" + `workspace` + "`" + ` (string): Workspace path\n- ` + "`" + `files` + "`" + ` ([]string): List of modified files\n- **git:clean**: Fired when git workspace becomes clean\n- ` + "`" + `workspace` + "`" + ` (string): Workspace path\n\n### Process Events\n- **process:started**: Fired when a new process starts\n- ` + "`" + `pid` + "`" + ` (int): Process ID\n- ` + "`" + `command` + "`" + ` (string): Command that was executed\n- ` + "`" + `workspace` + "`" + ` (string): Workspace where process started\n- **process:stopped**: Fired when a process terminates\n- ` + "`" + `pid` + "`" + ` (int): Process ID that stopped\n- ` + "`" + `exitCode` + "`" + ` (int): Exit code of the process\n\n### Container Events\n- **container:status**: Fired when container status changes\n- ` + "`" + `status` + "`" + ` (string): Container status (running, stopped, error)\n- ` + "`" + `message` + "`" + ` (string): Optional status message\n\n### System Events\n- **heartbeat**: Sent every 5 seconds to keep connection alive\n- ` + "`" + `timestamp` + "`" + ` (int64): Current timestamp in milliseconds\n- ` + "`" + `uptime` + "`" + ` (int64): Server uptime in milliseconds\n\n## Message Format\nEach SSE message is a JSON object with:\n- ` + "`" + `event` + "`" + `: Event object containing ` + "`" + `type` + "`" + ` and ` + "`" + `payload` + "`" + `\n- ` + "`" + `timestamp` + "`" + `: Event timestamp in milliseconds\n- ` + "`" + `id` + "`" + `: Unique event identifier\n\n## Connection Behavior\n- Auto-reconnects on disconnection\n- Sends current state on initial connection\n- Heartbeat every 5 seconds\n- Rate limited to prevent spam",
                "consumes": [
                    "text/event-stream"
                ],
                "produces": [
                    "text/event-stream"
                ],
                "tags": [
                    "events"
                ],
                "summary": "Server-Sent Events endpoint for real-time container events",
                "responses": {
                    "200": {
                        "description": "SSE stream of events",
                        "schema": {
                            "$ref": "#/definitions/internal_handlers.SSEMessage"
                        }
                    }
                }
            }
        },
        "/v1/git/branches/{repo_id}": {
            "get": {
                "description": "Returns a list of remote branches for a specific repository",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "git"
                ],
                "summary": "Get repository branches",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Repository ID",
                        "name": "repo_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/v1/git/checkout/{org}/{repo}": {
            "post": {
                "description": "Clones a GitHub repository as a bare repo and creates initial worktree",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "git"
                ],
                "summary": "Checkout a GitHub repository",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Organization name",
                        "name": "org",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Repository name",
                        "name": "repo",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Branch name (optional)",
                        "name": "branch",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_handlers.CheckoutResponse"
                        }
                    }
                }
            }
        },
        "/v1/git/github/repos": {
            "get": {
                "description": "Returns a list of GitHub repositories accessible to the authenticated user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "git"
                ],
                "summary": "List GitHub repositories",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/internal_handlers.GitHubRepository"
                            }
                        }
                    }
                }
            }
        },
        "/v1/git/repositories/{id}/github": {
            "post": {
                "description": "Creates a new GitHub repository and sets it as the origin for a local repository",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "git"
                ],
                "summary": "Create GitHub repository",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Repository ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Repository creation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_handlers.CreateGitHubRepositoryRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_handlers.CreateGitHubRepositoryResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/v1/git/status": {
            "get": {
                "description": "Returns the current repository and worktree status",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "git"
                ],
                "summary": "Get Git status",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_vanpelt_catnip_internal_models.GitStatus"
                        }
                    }
                }
            }
        },
        "/v1/git/template": {
            "post": {
                "description": "Creates a new Git repository and workspace from a predefined project template",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "git"
                ],
                "summary": "Create workspace from template",
                "parameters": [
                    {
                        "description": "Template creation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_handlers.CreateTemplateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request or template not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/v1/git/worktrees": {
            "get": {
                "description": "Returns a list of all worktrees for the current repository with fast cache-enhanced responses",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "git"
                ],
                "summary": "List all worktrees",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/internal_handlers.EnhancedWorktree"
                            }
                        }
                    }
                }
            }
        },
        "/v1/git/worktrees/cleanup": {
            "post": {
                "description": "Removes worktrees that have been fully merged into their source branch",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "git"
                ],
                "summary": "Cleanup merged worktrees",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/v1/git/worktrees/{id}": {
            "delete": {
                "description": "Removes a worktree from the repository",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "git"
                ],
                "summary": "Delete worktree",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Worktree ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_handlers.WorktreeOperationResponse"
                        }
                    }
                }
            },
            "patch": {
                "description": "Updates specific fields of a worktree (for testing purposes)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "git"
                ],
                "summary": "Update worktree fields",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Worktree ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Fields to update",
                        "name": "updates",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_vanpelt_catnip_internal_models.Worktree"
                        }
                    }
                }
            }
        },
        "/v1/git/worktrees/{id}/diff": {
            "get": {
                "description": "Returns the diff for a worktree against its source branch, including all staged/unstaged changes",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "git"
                ],
                "summary": "Get worktree diff",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Worktree ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_handlers.WorktreeDiffResponse"
                        }
                    }
                }
            }
        },
        "/v1/git/worktrees/{id}/graduate": {
            "post": {
                "description": "Triggers renaming of any branch to a semantic name using Claude or a custom name",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "git"
                ],
                "summary": "Rename branch",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Worktree ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Graduation request with optional custom branch name",
                        "name": "request",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/internal_handlers.GraduateBranchRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request (invalid branch name, branch already exists, etc.)",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Worktree not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "422": {
                        "description": "No title available for automatic naming",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/v1/git/worktrees/{id}/merge": {
            "post": {
                "description": "Merges a local repo worktree's changes back to the main repository",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "git"
                ],
                "summary": "Merge worktree to main",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Worktree ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Merge options",
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_handlers.WorktreeOperationResponse"
                        }
                    }
                }
            }
        },
        "/v1/git/worktrees/{id}/merge/check": {
            "get": {
                "description": "Checks if merging a worktree to main would cause conflicts",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "git"
                ],
                "summary": "Check merge conflicts",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Worktree ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_handlers.ConflictCheckResponse"
                        }
                    }
                }
            }
        },
        "/v1/git/worktrees/{id}/pr": {
            "get": {
                "description": "Gets information about an existing pull request for a worktree branch",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "git"
                ],
                "summary": "Get pull request info",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Worktree ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_vanpelt_catnip_internal_models.PullRequestInfo"
                        }
                    }
                }
            },
            "put": {
                "description": "Updates an existing pull request for a worktree branch",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "git"
                ],
                "summary": "Update pull request",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Worktree ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Pull request details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_handlers.CreatePullRequestRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_vanpelt_catnip_internal_models.PullRequestResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Creates a pull request for a worktree branch",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "git"
                ],
                "summary": "Create pull request",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Worktree ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Pull request details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_handlers.CreatePullRequestRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_vanpelt_catnip_internal_models.PullRequestResponse"
                        }
                    }
                }
            }
        },
        "/v1/git/worktrees/{id}/preview": {
            "post": {
                "description": "Creates a preview branch in the main repo for viewing changes outside container",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "git"
                ],
                "summary": "Create worktree preview",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Worktree ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_handlers.WorktreeOperationResponse"
                        }
                    }
                }
            }
        },
        "/v1/git/worktrees/{id}/refresh": {
            "post": {
                "description": "Forces an immediate refresh of a worktree's cached status including commit counts",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "git"
                ],
                "summary": "Force refresh worktree status",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Worktree ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/v1/git/worktrees/{id}/sync": {
            "post": {
                "description": "Syncs a worktree with its source branch using merge or rebase strategy",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "git"
                ],
                "summary": "Sync worktree with source branch",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Worktree ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Sync options",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_handlers.WorktreeOperationResponse"
                        }
                    }
                }
            }
        },
        "/v1/git/worktrees/{id}/sync/check": {
            "get": {
                "description": "Checks if syncing a worktree would cause merge conflicts",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "git"
                ],
                "summary": "Check sync conflicts",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Worktree ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_handlers.ConflictCheckResponse"
                        }
                    }
                }
            }
        },
        "/v1/notifications": {
            "post": {
                "description": "Sends a notification event to all connected SSE clients, including the TUI app which can display native macOS notifications",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "notifications"
                ],
                "summary": "Send notification",
                "parameters": [
                    {
                        "description": "Notification details",
                        "name": "notification",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_handlers.NotificationPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success response",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/v1/ports": {
            "get": {
                "description": "Returns a list of all currently detected ports with their service information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ports"
                ],
                "summary": "Get detected ports",
                "responses": {
                    "200": {
                        "description": "List of detected ports and services",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/v1/ports/mappings": {
            "post": {
                "description": "Records a mapping from container port to host port and broadcasts an SSE event",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ports"
                ],
                "summary": "Set host port mapping for a container port",
                "parameters": [
                    {
                        "description": "Mapping object with 'port' and 'host_port'",
                        "name": "mapping",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "integer"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Mapping set",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/v1/ports/mappings/{port}": {
            "delete": {
                "description": "Removes a mapping and broadcasts an SSE event with host_port=0",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ports"
                ],
                "summary": "Delete host port mapping for a container port",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Container port",
                        "name": "port",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Mapping deleted",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid port",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/v1/ports/{port}": {
            "get": {
                "description": "Returns detailed information about a specific port if it exists",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ports"
                ],
                "summary": "Get port information",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Port number",
                        "name": "port",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Port information",
                        "schema": {
                            "$ref": "#/definitions/github_com_vanpelt_catnip_internal_services.ServiceInfo"
                        }
                    },
                    "404": {
                        "description": "Port not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/v1/pty": {
            "get": {
                "description": "Establishes a WebSocket connection for terminal access",
                "tags": [
                    "pty"
                ],
                "summary": "Create PTY WebSocket connection",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Session ID",
                        "name": "session",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "101": {
                        "description": "Switching Protocols",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/sessions": {
            "get": {
                "description": "Returns all sessions including ended ones",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sessions"
                ],
                "summary": "Get all sessions",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_handlers.SessionsResponse"
                        }
                    }
                }
            }
        },
        "/v1/sessions/active": {
            "get": {
                "description": "Returns all active sessions (not ended)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sessions"
                ],
                "summary": "Get active sessions",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_handlers.SessionsResponse"
                        }
                    }
                }
            }
        },
        "/v1/sessions/workspace/{workspace}": {
            "get": {
                "description": "Returns session information for a specific workspace directory. Use ?full=true for complete session data including messages.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sessions"
                ],
                "summary": "Get session by workspace",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Workspace directory path",
                        "name": "workspace",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "description": "Include full session data with messages and user prompts",
                        "name": "full",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Basic session info when full=false",
                        "schema": {
                            "$ref": "#/definitions/internal_handlers.ActiveSessionInfo"
                        }
                    }
                }
            },
            "delete": {
                "description": "Removes a session from the active sessions mapping",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sessions"
                ],
                "summary": "Delete session",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Workspace directory path",
                        "name": "workspace",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_handlers.DeleteSessionResponse"
                        }
                    }
                }
            }
        },
        "/v1/sessions/workspace/{workspace}/session/{sessionId}": {
            "get": {
                "description": "Returns complete session data for a specific session ID within a workspace",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sessions"
                ],
                "summary": "Get session by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Workspace directory path",
                        "name": "workspace",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Session ID (UUID)",
                        "name": "sessionId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_vanpelt_catnip_internal_models.FullSessionData"
                        }
                    }
                }
            }
        },
        "/v1/upload": {
            "post": {
                "description": "Upload a file to /tmp/uploads directory with automatic conflict resolution",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "upload"
                ],
                "summary": "Upload a file",
                "parameters": [
                    {
                        "type": "file",
                        "description": "File to upload",
                        "name": "file",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_handlers.UploadResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/internal_handlers.UploadResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/internal_handlers.UploadResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "github_com_vanpelt_catnip_internal_models.ClaudeActivityState": {
            "type": "string",
            "enum": [
                "inactive",
                "running",
                "active"
            ],
            "x-enum-varnames": [
                "ClaudeInactive",
                "ClaudeRunning",
                "ClaudeActive"
            ]
        },
        "github_com_vanpelt_catnip_internal_models.ClaudeHistoryEntry": {
            "type": "object",
            "properties": {
                "display": {
                    "type": "string"
                },
                "pastedContents": {
                    "type": "object",
                    "additionalProperties": {}
                }
            }
        },
        "github_com_vanpelt_catnip_internal_models.ClaudeHookEvent": {
            "description": "Claude Code hook event for activity tracking",
            "type": "object",
            "properties": {
                "data": {
                    "description": "Additional event-specific data",
                    "type": "object",
                    "additionalProperties": true
                },
                "event_type": {
                    "description": "Type of the hook event (UserPromptSubmit, Stop, etc.)",
                    "type": "string",
                    "example": "UserPromptSubmit"
                },
                "session_id": {
                    "description": "Session ID if available",
                    "type": "string",
                    "example": "abc123-def456-ghi789"
                },
                "working_directory": {
                    "description": "Working directory where the event occurred",
                    "type": "string",
                    "example": "/workspace/my-project"
                }
            }
        },
        "github_com_vanpelt_catnip_internal_models.ClaudeSessionMessage": {
            "type": "object",
            "properties": {
                "cwd": {
                    "type": "string"
                },
                "isMeta": {
                    "type": "boolean"
                },
                "isSidechain": {
                    "type": "boolean"
                },
                "message": {
                    "type": "object",
                    "additionalProperties": {}
                },
                "parentUuid": {
                    "type": "string"
                },
                "sessionId": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "userType": {
                    "type": "string"
                },
                "uuid": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "github_com_vanpelt_catnip_internal_models.ClaudeSessionSummary": {
            "description": "Claude Code session summary with metrics and timing information",
            "type": "object",
            "properties": {
                "allSessions": {
                    "description": "List of all available sessions for this worktree",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_vanpelt_catnip_internal_models.SessionListEntry"
                    }
                },
                "currentSessionId": {
                    "description": "ID of the currently active session",
                    "type": "string",
                    "example": "xyz789-ghi012"
                },
                "header": {
                    "description": "Header/title of the session from the Claude history",
                    "type": "string",
                    "example": "Fix bug in user authentication"
                },
                "isActive": {
                    "description": "Whether this session is currently active",
                    "type": "boolean",
                    "example": true
                },
                "lastCost": {
                    "description": "Metrics (from completed sessions)\nCost in USD of the last completed session",
                    "type": "number",
                    "example": 0.25
                },
                "lastDuration": {
                    "description": "Duration in seconds of the last session",
                    "type": "integer",
                    "example": 3600
                },
                "lastSessionId": {
                    "description": "ID of the most recent completed session",
                    "type": "string",
                    "example": "abc123-def456"
                },
                "lastTotalInputTokens": {
                    "description": "Total input tokens used in the last session",
                    "type": "integer",
                    "example": 15000
                },
                "lastTotalOutputTokens": {
                    "description": "Total output tokens generated in the last session",
                    "type": "integer",
                    "example": 8500
                },
                "sessionEndTime": {
                    "description": "When the last session ended (if not active)",
                    "type": "string",
                    "example": "2024-01-15T16:45:30Z"
                },
                "sessionStartTime": {
                    "description": "When the current session started",
                    "type": "string",
                    "example": "2024-01-15T14:30:00Z"
                },
                "turnCount": {
                    "description": "Number of conversation turns in the session",
                    "type": "integer",
                    "example": 15
                },
                "worktreePath": {
                    "description": "Path to the worktree directory",
                    "type": "string",
                    "example": "/workspace/my-project"
                }
            }
        },
        "github_com_vanpelt_catnip_internal_models.ClaudeSettings": {
            "description": "Claude Code configuration settings from ~/.claude.json",
            "type": "object",
            "properties": {
                "hasCompletedOnboarding": {
                    "description": "Whether user has completed onboarding",
                    "type": "boolean",
                    "example": true
                },
                "isAuthenticated": {
                    "description": "Whether user is authenticated (has userID)",
                    "type": "boolean",
                    "example": true
                },
                "notificationsEnabled": {
                    "description": "Whether notifications are enabled",
                    "type": "boolean",
                    "example": true
                },
                "numStartups": {
                    "description": "Number of times Claude has been started",
                    "type": "integer",
                    "example": 15
                },
                "theme": {
                    "description": "Current theme setting",
                    "type": "string",
                    "enum": [
                        "dark",
                        "light",
                        "dark-daltonized",
                        "light-daltonized",
                        "dark-ansi",
                        "light-ansi"
                    ],
                    "example": "dark"
                },
                "version": {
                    "description": "Version string derived from lastReleaseNotesSeen",
                    "type": "string",
                    "example": "1.2.3"
                }
            }
        },
        "github_com_vanpelt_catnip_internal_models.ClaudeSettingsUpdateRequest": {
            "description": "Request to update Claude Code settings",
            "type": "object",
            "properties": {
                "notificationsEnabled": {
                    "description": "Whether notifications should be enabled",
                    "type": "boolean",
                    "example": true
                },
                "theme": {
                    "description": "Theme to set (must be one of the valid theme values)",
                    "type": "string",
                    "enum": [
                        "dark",
                        "light",
                        "dark-daltonized",
                        "light-daltonized",
                        "dark-ansi",
                        "light-ansi"
                    ],
                    "example": "dark"
                }
            }
        },
        "github_com_vanpelt_catnip_internal_models.CreateCompletionRequest": {
            "description": "Request payload for Claude Code completion using claude CLI subprocess",
            "type": "object",
            "properties": {
                "max_turns": {
                    "description": "Maximum number of turns in the conversation",
                    "type": "integer",
                    "example": 10
                },
                "model": {
                    "description": "Optional model override",
                    "type": "string",
                    "example": "claude-3-5-sonnet-20241022"
                },
                "prompt": {
                    "description": "The prompt/message to send to claude",
                    "type": "string",
                    "example": "Help me debug this error"
                },
                "resume": {
                    "description": "Whether to resume the most recent session for this working directory",
                    "type": "boolean",
                    "example": true
                },
                "stream": {
                    "description": "Whether to stream the response",
                    "type": "boolean",
                    "example": true
                },
                "suppress_events": {
                    "description": "Whether to suppress stop events for this automated operation",
                    "type": "boolean",
                    "example": true
                },
                "system_prompt": {
                    "description": "Optional system prompt override",
                    "type": "string",
                    "example": "You are a helpful coding assistant"
                },
                "working_directory": {
                    "description": "Working directory for the claude command",
                    "type": "string",
                    "example": "/workspace/my-project"
                }
            }
        },
        "github_com_vanpelt_catnip_internal_models.CreateCompletionResponse": {
            "description": "Response from Claude Code completion using claude CLI subprocess",
            "type": "object",
            "properties": {
                "error": {
                    "description": "Any error that occurred",
                    "type": "string"
                },
                "is_chunk": {
                    "description": "Whether this is a streaming chunk or complete response",
                    "type": "boolean",
                    "example": false
                },
                "is_last": {
                    "description": "Whether this is the last chunk in a stream",
                    "type": "boolean",
                    "example": true
                },
                "response": {
                    "description": "The generated response text",
                    "type": "string",
                    "example": "I can help you debug that error..."
                }
            }
        },
        "github_com_vanpelt_catnip_internal_models.FullSessionData": {
            "description": "Complete session data with all messages and metadata",
            "type": "object",
            "properties": {
                "allSessions": {
                    "description": "All sessions available for this workspace",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_vanpelt_catnip_internal_models.SessionListEntry"
                    }
                },
                "messageCount": {
                    "description": "Total message count in full data",
                    "type": "integer"
                },
                "messages": {
                    "description": "Full conversation history (only when full=true)",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_vanpelt_catnip_internal_models.ClaudeSessionMessage"
                    }
                },
                "sessionInfo": {
                    "description": "Basic session information",
                    "allOf": [
                        {
                            "$ref": "#/definitions/github_com_vanpelt_catnip_internal_models.ClaudeSessionSummary"
                        }
                    ]
                },
                "userPrompts": {
                    "description": "User prompts from ~/.claude.json (only when full=true)",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_vanpelt_catnip_internal_models.ClaudeHistoryEntry"
                    }
                }
            }
        },
        "github_com_vanpelt_catnip_internal_models.GitStatus": {
            "description": "Current git status including repository information",
            "type": "object",
            "properties": {
                "repositories": {
                    "description": "All loaded repositories mapped by repository ID",
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/github_com_vanpelt_catnip_internal_models.Repository"
                    }
                },
                "worktree_count": {
                    "description": "Total number of worktrees across all repositories",
                    "type": "integer",
                    "example": 3
                }
            }
        },
        "github_com_vanpelt_catnip_internal_models.PullRequestInfo": {
            "description": "Information about an existing pull request for a worktree",
            "type": "object",
            "properties": {
                "body": {
                    "description": "Body/description of the existing pull request (if exists)",
                    "type": "string",
                    "example": "This PR adds new functionality"
                },
                "exists": {
                    "description": "Whether a pull request exists for this branch",
                    "type": "boolean",
                    "example": true
                },
                "has_commits_ahead": {
                    "description": "Whether the branch has commits ahead of the base branch",
                    "type": "boolean",
                    "example": true
                },
                "number": {
                    "description": "Pull request number (if exists)",
                    "type": "integer",
                    "example": 123
                },
                "title": {
                    "description": "Title of the existing pull request (if exists)",
                    "type": "string",
                    "example": "Feature: Add new functionality"
                },
                "url": {
                    "description": "URL to the pull request (if exists)",
                    "type": "string",
                    "example": "https://github.com/owner/repo/pull/123"
                }
            }
        },
        "github_com_vanpelt_catnip_internal_models.PullRequestResponse": {
            "description": "Response containing pull request information after creation",
            "type": "object",
            "properties": {
                "base_branch": {
                    "description": "Base branch (target branch of the PR)",
                    "type": "string",
                    "example": "main"
                },
                "body": {
                    "description": "Body/description of the pull request",
                    "type": "string",
                    "example": "This PR adds new functionality to the system"
                },
                "head_branch": {
                    "description": "Head branch (source branch of the PR)",
                    "type": "string",
                    "example": "feature/new-feature"
                },
                "number": {
                    "description": "Pull request number",
                    "type": "integer",
                    "example": 123
                },
                "repository": {
                    "description": "Repository in owner/repo format",
                    "type": "string",
                    "example": "owner/repo"
                },
                "title": {
                    "description": "Title of the pull request",
                    "type": "string",
                    "example": "Feature: Add new functionality"
                },
                "url": {
                    "description": "URL to the pull request",
                    "type": "string",
                    "example": "https://github.com/owner/repo/pull/123"
                }
            }
        },
        "github_com_vanpelt_catnip_internal_models.Repository": {
            "description": "Git repository information and metadata",
            "type": "object",
            "properties": {
                "available": {
                    "description": "Whether the repository is currently available on disk",
                    "type": "boolean",
                    "example": true
                },
                "created_at": {
                    "description": "When this repository was first cloned",
                    "type": "string",
                    "example": "2024-01-15T10:30:00Z"
                },
                "default_branch": {
                    "description": "Default branch name for this repository",
                    "type": "string",
                    "example": "main"
                },
                "description": {
                    "description": "Repository description",
                    "type": "string",
                    "example": "AI coding assistant"
                },
                "has_github_remote": {
                    "description": "Whether the remote origin is a GitHub repository",
                    "type": "boolean",
                    "example": true
                },
                "id": {
                    "description": "Repository identifier in owner/repo format",
                    "type": "string",
                    "example": "anthropics/claude-code"
                },
                "last_accessed": {
                    "description": "When this repository was last accessed",
                    "type": "string",
                    "example": "2024-01-15T16:45:30Z"
                },
                "path": {
                    "description": "Local path to the bare repository",
                    "type": "string",
                    "example": "/workspace/repos/anthropics_claude-code.git"
                },
                "remote_origin": {
                    "description": "Remote origin URL (may be different from URL for local repos)",
                    "type": "string",
                    "example": "https://github.com/anthropics/claude-code.git"
                },
                "url": {
                    "description": "Full GitHub repository URL",
                    "type": "string",
                    "example": "https://github.com/anthropics/claude-code"
                }
            }
        },
        "github_com_vanpelt_catnip_internal_models.SessionListEntry": {
            "description": "Session list entry with basic metadata",
            "type": "object",
            "properties": {
                "endTime": {
                    "description": "When the session ended (if available)",
                    "type": "string",
                    "example": "2024-01-15T16:45:30Z"
                },
                "isActive": {
                    "description": "Whether this session is currently active",
                    "type": "boolean",
                    "example": false
                },
                "lastModified": {
                    "description": "When the session was last modified",
                    "type": "string",
                    "example": "2024-01-15T16:45:30Z"
                },
                "sessionId": {
                    "description": "Unique session identifier",
                    "type": "string",
                    "example": "abc123-def456-ghi789"
                },
                "startTime": {
                    "description": "When the session started (if available)",
                    "type": "string",
                    "example": "2024-01-15T14:30:00Z"
                }
            }
        },
        "github_com_vanpelt_catnip_internal_models.TitleEntry": {
            "type": "object",
            "properties": {
                "commit_hash": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "github_com_vanpelt_catnip_internal_models.Todo": {
            "description": "A todo item with status and priority tracking",
            "type": "object",
            "properties": {
                "content": {
                    "description": "The content/description of the todo",
                    "type": "string",
                    "example": "Fix authentication bug"
                },
                "id": {
                    "description": "Unique identifier for the todo item",
                    "type": "string",
                    "example": "1"
                },
                "priority": {
                    "description": "Priority level of the todo",
                    "type": "string",
                    "enum": [
                        "high",
                        "medium",
                        "low"
                    ],
                    "example": "high"
                },
                "status": {
                    "description": "Current status of the todo",
                    "type": "string",
                    "enum": [
                        "pending",
                        "in_progress",
                        "completed"
                    ],
                    "example": "in_progress"
                }
            }
        },
        "github_com_vanpelt_catnip_internal_models.Worktree": {
            "description": "Git worktree with branch and status information",
            "type": "object",
            "properties": {
                "branch": {
                    "description": "Current git branch name in this worktree",
                    "type": "string",
                    "example": "feature/api-docs"
                },
                "claude_activity_state": {
                    "description": "Current Claude activity state (inactive/running/active)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/github_com_vanpelt_catnip_internal_models.ClaudeActivityState"
                        }
                    ]
                },
                "commit_count": {
                    "description": "Number of commits ahead of the divergence point (CommitHash)",
                    "type": "integer",
                    "example": 3
                },
                "commit_hash": {
                    "description": "Commit hash where this worktree diverged from source branch (updated after merges)",
                    "type": "string",
                    "example": "abc123def456"
                },
                "commits_behind": {
                    "description": "Number of commits the source branch is ahead of our divergence point",
                    "type": "integer",
                    "example": 2
                },
                "created_at": {
                    "description": "When this worktree was created",
                    "type": "string",
                    "example": "2024-01-15T14:00:00Z"
                },
                "has_active_claude_session": {
                    "description": "Whether there's an active Claude session for this worktree (deprecated - use ClaudeActivityState)",
                    "type": "boolean"
                },
                "has_been_renamed": {
                    "description": "Whether this worktree's branch has been renamed from its original catnip ref",
                    "type": "boolean",
                    "example": true
                },
                "has_conflicts": {
                    "description": "Whether the worktree is in a conflicted state (rebase/merge conflicts)",
                    "type": "boolean",
                    "example": false
                },
                "id": {
                    "description": "Unique identifier for this worktree",
                    "type": "string",
                    "example": "abc123-def456-ghi789"
                },
                "is_dirty": {
                    "description": "Whether there are uncommitted changes in the worktree",
                    "type": "boolean",
                    "example": true
                },
                "last_accessed": {
                    "description": "When this worktree was last accessed",
                    "type": "string",
                    "example": "2024-01-15T16:30:00Z"
                },
                "name": {
                    "description": "User-friendly name for this worktree (e.g., 'vectorize-quasar')",
                    "type": "string",
                    "example": "feature-api-docs"
                },
                "path": {
                    "description": "Absolute path to the worktree directory",
                    "type": "string",
                    "example": "/workspace/worktrees/feature-api-docs"
                },
                "pull_request_body": {
                    "description": "Body/description of the associated pull request (persisted for updates)",
                    "type": "string",
                    "example": "This PR adds new functionality to the system"
                },
                "pull_request_last_synced": {
                    "description": "Last time the PR state was synced",
                    "type": "string"
                },
                "pull_request_state": {
                    "description": "State of the associated pull request (open, closed, merged)",
                    "type": "string",
                    "example": "open"
                },
                "pull_request_title": {
                    "description": "Title of the associated pull request (persisted for updates)",
                    "type": "string",
                    "example": "Feature: Add new functionality"
                },
                "pull_request_url": {
                    "description": "URL of the associated pull request (if one exists)",
                    "type": "string",
                    "example": "https://github.com/owner/repo/pull/123"
                },
                "repo_id": {
                    "description": "Repository this worktree belongs to",
                    "type": "string",
                    "example": "anthropics/claude-code"
                },
                "session_title": {
                    "description": "Current session title (from terminal title escape sequences)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/github_com_vanpelt_catnip_internal_models.TitleEntry"
                        }
                    ]
                },
                "session_title_history": {
                    "description": "History of session titles",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_vanpelt_catnip_internal_models.TitleEntry"
                    }
                },
                "source_branch": {
                    "description": "Branch this worktree was originally created from",
                    "type": "string",
                    "example": "main"
                },
                "todos": {
                    "description": "Current todos from the most recent TodoWrite in Claude session",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_vanpelt_catnip_internal_models.Todo"
                    }
                }
            }
        },
        "github_com_vanpelt_catnip_internal_services.ServiceInfo": {
            "type": "object",
            "properties": {
                "command": {
                    "type": "string"
                },
                "detection_source": {
                    "description": "\"tcp-scan\", \"terminal-output\", etc.",
                    "type": "string"
                },
                "health": {
                    "type": "string"
                },
                "last_seen": {
                    "type": "string"
                },
                "pid": {
                    "type": "integer"
                },
                "port": {
                    "type": "integer"
                },
                "service_type": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "working_dir": {
                    "type": "string"
                }
            }
        },
        "internal_handlers.ActiveSessionInfo": {
            "description": "Active session information with timing and Claude session details",
            "type": "object",
            "properties": {
                "claude_session_uuid": {
                    "description": "Unique identifier for the Claude session",
                    "type": "string",
                    "example": "abc123-def456-ghi789"
                },
                "ended_at": {
                    "description": "When the session ended (if not active)",
                    "type": "string",
                    "example": "2024-01-15T18:30:00Z"
                },
                "resumed_at": {
                    "description": "When the session was resumed (if applicable)",
                    "type": "string",
                    "example": "2024-01-15T16:00:00Z"
                },
                "started_at": {
                    "description": "When the session was initially started",
                    "type": "string",
                    "example": "2024-01-15T14:30:00Z"
                },
                "title": {
                    "description": "Title of the session",
                    "type": "string",
                    "example": "Updating README.md"
                }
            }
        },
        "internal_handlers.AppEvent": {
            "type": "object",
            "properties": {
                "payload": {},
                "type": {
                    "$ref": "#/definitions/internal_handlers.EventType"
                }
            }
        },
        "internal_handlers.AuthStartResponse": {
            "description": "Response when starting GitHub device flow authentication",
            "type": "object",
            "properties": {
                "code": {
                    "description": "Device verification code to enter on GitHub",
                    "type": "string",
                    "example": "1234-5678"
                },
                "status": {
                    "description": "Current authentication status",
                    "type": "string",
                    "example": "waiting"
                },
                "url": {
                    "description": "GitHub device activation URL",
                    "type": "string",
                    "example": "https://github.com/login/device"
                }
            }
        },
        "internal_handlers.AuthStatusResponse": {
            "description": "Response containing the current authentication status",
            "type": "object",
            "properties": {
                "error": {
                    "description": "Error message if authentication failed",
                    "type": "string",
                    "example": "authentication timeout"
                },
                "status": {
                    "description": "Authentication status: pending, waiting, success, none, or error",
                    "type": "string",
                    "example": "success"
                },
                "user": {
                    "description": "User information when authenticated",
                    "allOf": [
                        {
                            "$ref": "#/definitions/internal_handlers.AuthUser"
                        }
                    ]
                }
            }
        },
        "internal_handlers.AuthUser": {
            "description": "User information when authenticated with GitHub",
            "type": "object",
            "properties": {
                "scopes": {
                    "description": "Token scopes",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "repo",
                        "read:org",
                        "workflow"
                    ]
                },
                "username": {
                    "description": "GitHub username",
                    "type": "string",
                    "example": "vanpelt"
                }
            }
        },
        "internal_handlers.CheckoutResponse": {
            "description": "Response containing repository and worktree information after checkout",
            "type": "object",
            "properties": {
                "message": {
                    "description": "Success message",
                    "type": "string",
                    "example": "Repository checked out successfully"
                },
                "repository": {
                    "description": "Repository information",
                    "allOf": [
                        {
                            "$ref": "#/definitions/github_com_vanpelt_catnip_internal_models.Repository"
                        }
                    ]
                },
                "worktree": {
                    "description": "Created worktree information",
                    "allOf": [
                        {
                            "$ref": "#/definitions/github_com_vanpelt_catnip_internal_models.Worktree"
                        }
                    ]
                }
            }
        },
        "internal_handlers.ConflictCheckResponse": {
            "description": "Response containing conflict information for sync/merge operations",
            "type": "object",
            "properties": {
                "conflict_files": {
                    "description": "List of files with conflicts",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "[\"src/main.go\"",
                        " \"README.md\"]"
                    ]
                },
                "has_conflicts": {
                    "description": "Whether conflicts were detected",
                    "type": "boolean",
                    "example": true
                },
                "message": {
                    "description": "Status message",
                    "type": "string",
                    "example": "No conflicts detected"
                },
                "operation": {
                    "description": "Operation type (sync/merge)",
                    "type": "string",
                    "example": "sync"
                },
                "worktree_name": {
                    "description": "Name of the worktree",
                    "type": "string",
                    "example": "feature-branch"
                }
            }
        },
        "internal_handlers.CreateGitHubRepositoryRequest": {
            "description": "Request to create a new GitHub repository and set it as origin",
            "type": "object",
            "properties": {
                "description": {
                    "description": "Repository description",
                    "type": "string",
                    "example": "My awesome project"
                },
                "is_private": {
                    "description": "Whether the repository should be private",
                    "type": "boolean",
                    "example": false
                },
                "name": {
                    "description": "Repository name",
                    "type": "string",
                    "example": "my-project"
                }
            }
        },
        "internal_handlers.CreateGitHubRepositoryResponse": {
            "description": "Response containing the created repository information",
            "type": "object",
            "properties": {
                "message": {
                    "description": "Success message",
                    "type": "string",
                    "example": "Repository created and origin updated successfully"
                },
                "url": {
                    "description": "URL of the created repository",
                    "type": "string",
                    "example": "https://github.com/user/repo"
                }
            }
        },
        "internal_handlers.CreatePullRequestRequest": {
            "type": "object",
            "properties": {
                "body": {
                    "type": "string"
                },
                "force_push": {
                    "type": "boolean"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "internal_handlers.CreateTemplateRequest": {
            "type": "object",
            "required": [
                "project_name",
                "template_id"
            ],
            "properties": {
                "project_name": {
                    "type": "string"
                },
                "template_id": {
                    "type": "string"
                }
            }
        },
        "internal_handlers.DeleteSessionResponse": {
            "description": "Response confirming session deletion",
            "type": "object",
            "properties": {
                "message": {
                    "description": "Confirmation message",
                    "type": "string",
                    "example": "Session deleted successfully"
                },
                "workspace": {
                    "description": "Workspace path that was deleted",
                    "type": "string",
                    "example": "/workspace/my-project"
                }
            }
        },
        "internal_handlers.EnhancedWorktree": {
            "type": "object",
            "properties": {
                "branch": {
                    "description": "Current git branch name in this worktree",
                    "type": "string",
                    "example": "feature/api-docs"
                },
                "cache_status": {
                    "$ref": "#/definitions/internal_handlers.WorktreeCacheStatus"
                },
                "claude_activity_state": {
                    "description": "Current Claude activity state (inactive/running/active)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/github_com_vanpelt_catnip_internal_models.ClaudeActivityState"
                        }
                    ]
                },
                "commit_count": {
                    "description": "Number of commits ahead of the divergence point (CommitHash)",
                    "type": "integer",
                    "example": 3
                },
                "commit_hash": {
                    "description": "Commit hash where this worktree diverged from source branch (updated after merges)",
                    "type": "string",
                    "example": "abc123def456"
                },
                "commits_behind": {
                    "description": "Number of commits the source branch is ahead of our divergence point",
                    "type": "integer",
                    "example": 2
                },
                "created_at": {
                    "description": "When this worktree was created",
                    "type": "string",
                    "example": "2024-01-15T14:00:00Z"
                },
                "has_active_claude_session": {
                    "description": "Whether there's an active Claude session for this worktree (deprecated - use ClaudeActivityState)",
                    "type": "boolean"
                },
                "has_been_renamed": {
                    "description": "Whether this worktree's branch has been renamed from its original catnip ref",
                    "type": "boolean",
                    "example": true
                },
                "has_conflicts": {
                    "description": "Whether the worktree is in a conflicted state (rebase/merge conflicts)",
                    "type": "boolean",
                    "example": false
                },
                "id": {
                    "description": "Unique identifier for this worktree",
                    "type": "string",
                    "example": "abc123-def456-ghi789"
                },
                "is_dirty": {
                    "description": "Whether there are uncommitted changes in the worktree",
                    "type": "boolean",
                    "example": true
                },
                "last_accessed": {
                    "description": "When this worktree was last accessed",
                    "type": "string",
                    "example": "2024-01-15T16:30:00Z"
                },
                "name": {
                    "description": "User-friendly name for this worktree (e.g., 'vectorize-quasar')",
                    "type": "string",
                    "example": "feature-api-docs"
                },
                "path": {
                    "description": "Absolute path to the worktree directory",
                    "type": "string",
                    "example": "/workspace/worktrees/feature-api-docs"
                },
                "pull_request_body": {
                    "description": "Body/description of the associated pull request (persisted for updates)",
                    "type": "string",
                    "example": "This PR adds new functionality to the system"
                },
                "pull_request_last_synced": {
                    "description": "Last time the PR state was synced",
                    "type": "string"
                },
                "pull_request_state": {
                    "description": "State of the associated pull request (open, closed, merged)",
                    "type": "string",
                    "example": "open"
                },
                "pull_request_title": {
                    "description": "Title of the associated pull request (persisted for updates)",
                    "type": "string",
                    "example": "Feature: Add new functionality"
                },
                "pull_request_url": {
                    "description": "URL of the associated pull request (if one exists)",
                    "type": "string",
                    "example": "https://github.com/owner/repo/pull/123"
                },
                "repo_id": {
                    "description": "Repository this worktree belongs to",
                    "type": "string",
                    "example": "anthropics/claude-code"
                },
                "session_title": {
                    "description": "Current session title (from terminal title escape sequences)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/github_com_vanpelt_catnip_internal_models.TitleEntry"
                        }
                    ]
                },
                "session_title_history": {
                    "description": "History of session titles",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_vanpelt_catnip_internal_models.TitleEntry"
                    }
                },
                "source_branch": {
                    "description": "Branch this worktree was originally created from",
                    "type": "string",
                    "example": "main"
                },
                "todos": {
                    "description": "Current todos from the most recent TodoWrite in Claude session",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_vanpelt_catnip_internal_models.Todo"
                    }
                }
            }
        },
        "internal_handlers.EventType": {
            "type": "string",
            "enum": [
                "port:opened",
                "port:closed",
                "git:dirty",
                "git:clean",
                "process:started",
                "process:stopped",
                "container:status",
                "port:mapped",
                "heartbeat",
                "worktree:status_updated",
                "worktree:batch_updated",
                "worktree:dirty",
                "worktree:clean",
                "worktree:updated",
                "worktree:created",
                "worktree:deleted",
                "worktree:todos_updated",
                "session:title_updated",
                "session:stopped",
                "notification:show"
            ],
            "x-enum-varnames": [
                "PortOpenedEvent",
                "PortClosedEvent",
                "GitDirtyEvent",
                "GitCleanEvent",
                "ProcessStartedEvent",
                "ProcessStoppedEvent",
                "ContainerStatusEvent",
                "PortMappedEvent",
                "HeartbeatEvent",
                "WorktreeStatusUpdatedEvent",
                "WorktreeBatchUpdatedEvent",
                "WorktreeDirtyEvent",
                "WorktreeCleanEvent",
                "WorktreeUpdatedEvent",
                "WorktreeCreatedEvent",
                "WorktreeDeletedEvent",
                "WorktreeTodosUpdatedEvent",
                "SessionTitleUpdatedEvent",
                "SessionStoppedEvent",
                "NotificationEvent"
            ]
        },
        "internal_handlers.GitHubRepository": {
            "description": "GitHub repository information from the GitHub API",
            "type": "object",
            "properties": {
                "clone_url": {
                    "description": "Git clone URL",
                    "type": "string",
                    "example": "https://github.com/anthropics/claude-code.git"
                },
                "description": {
                    "description": "Repository description",
                    "type": "string",
                    "example": "AI coding assistant"
                },
                "full_name": {
                    "description": "Full repository name (org/repo)",
                    "type": "string",
                    "example": "anthropics/claude-code"
                },
                "html_url": {
                    "description": "Repository URL",
                    "type": "string",
                    "example": "https://github.com/anthropics/claude-code"
                },
                "id": {
                    "description": "GitHub repository ID",
                    "type": "integer",
                    "example": 123456789
                },
                "name": {
                    "description": "Repository name",
                    "type": "string",
                    "example": "claude-code"
                },
                "private": {
                    "description": "Whether the repository is private",
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "internal_handlers.GraduateBranchRequest": {
            "type": "object",
            "properties": {
                "branch_name": {
                    "description": "Optional custom branch name to graduate to",
                    "type": "string",
                    "example": "feature/add-auth"
                }
            }
        },
        "internal_handlers.NotificationPayload": {
            "type": "object",
            "properties": {
                "body": {
                    "type": "string"
                },
                "subtitle": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "internal_handlers.SSEMessage": {
            "type": "object",
            "properties": {
                "event": {
                    "$ref": "#/definitions/internal_handlers.AppEvent"
                },
                "id": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "integer"
                }
            }
        },
        "internal_handlers.SessionsResponse": {
            "description": "Map of workspace paths to session information",
            "type": "object",
            "additionalProperties": {
                "$ref": "#/definitions/internal_handlers.ActiveSessionInfo"
            }
        },
        "internal_handlers.UploadResponse": {
            "description": "Response containing upload status and file location",
            "type": "object",
            "properties": {
                "filePath": {
                    "description": "Path where the uploaded file was saved",
                    "type": "string",
                    "example": "/tmp/uploads/document.pdf"
                },
                "message": {
                    "description": "Status message or error details",
                    "type": "string",
                    "example": "File uploaded successfully"
                },
                "success": {
                    "description": "Whether the upload succeeded",
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "internal_handlers.WorktreeCacheStatus": {
            "type": "object",
            "properties": {
                "is_cached": {
                    "type": "boolean"
                },
                "is_loading": {
                    "type": "boolean"
                },
                "last_updated": {
                    "description": "Unix timestamp in milliseconds",
                    "type": "integer"
                }
            }
        },
        "internal_handlers.WorktreeDiffResponse": {
            "description": "Response containing git diff information for a worktree",
            "type": "object",
            "properties": {
                "additions": {
                    "description": "Number of lines added",
                    "type": "integer",
                    "example": 25
                },
                "deletions": {
                    "description": "Number of lines deleted",
                    "type": "integer",
                    "example": 10
                },
                "diff": {
                    "description": "Raw git diff output",
                    "type": "string",
                    "example": "diff --git a/main.go b/main.go..."
                },
                "files_changed": {
                    "description": "List of changed files",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "[\"main.go\"",
                        " \"README.md\"]"
                    ]
                },
                "summary": {
                    "description": "Diff summary",
                    "type": "string",
                    "example": "2 files changed, 25 insertions(+), 10 deletions(-)"
                }
            }
        },
        "internal_handlers.WorktreeOperationResponse": {
            "description": "Response for worktree operations like delete, sync, merge, preview",
            "type": "object",
            "properties": {
                "id": {
                    "description": "Worktree ID",
                    "type": "string",
                    "example": "abc123-def456-ghi789"
                },
                "message": {
                    "description": "Operation result message",
                    "type": "string",
                    "example": "Worktree deleted successfully"
                },
                "strategy": {
                    "description": "Strategy used for sync operations",
                    "type": "string",
                    "example": "rebase"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "",
	Schemes:          []string{"http", "ws"},
	Title:            "Catnip Container API",
	Description:      "API for managing container PTY sessions and services",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
