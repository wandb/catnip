# GoReleaser configuration for catnip CLI
# yaml-language-server: $schema=https://goreleaser.com/static/schema-pro.json
# Documentation: https://goreleaser.com

version: 2

project_name: catnip

# Git configuration
git:
  # What should be used to sort tags when gathering the current and previous
  # tags if there are more than one tag in the same commit.
  tag_sort: -version:refname
  ignore_tags:
    - "nightly"

# Build configuration
builds:
  # Linux and FreeBSD builds without CGO
  - id: catnip-no-cgo
    main: ./cmd/cli/main.go
    binary: catnip
    env:
      - CGO_ENABLED=0

    # Build flags and ldflags for version injection
    flags:
      - -trimpath
    ldflags:
      - -s -w
      - -X main.version={{.Version}}
      - -X main.commit={{.ShortCommit}}
      - -X main.date={{.Date}}
      - -X main.builtBy=goreleaser

    # Target platforms for CGO-disabled builds
    goos:
      - linux
      - freebsd

    goarch:
      - amd64
      - arm64

    # Ignore combinations that don't make sense
    ignore:
      - goos: freebsd
        goarch: arm64
        
  # macOS builds with CGO for native notifications
  - id: catnip-macos
    main: ./cmd/cli/main.go
    binary: Catnip.app/Contents/MacOS/catnip
    env:
      - CGO_ENABLED=1

    # Build flags and ldflags for version injection
    flags:
      - -trimpath
    ldflags:
      - -s -w
      - -X main.version={{.Version}}
      - -X main.commit={{.ShortCommit}}
      - -X main.date={{.Date}}
      - -X main.builtBy=goreleaser

    # Target platforms for CGO-enabled builds (macOS only)
    goos:
      - darwin

    goarch:
      - amd64
      - arm64

    # Post-build hooks to sign and notarize the entire app bundle
    hooks:
      post:
        # Sign the app bundle after building
        - sh -c 'if [ -n "$APPLE_SIGN_P12" ] && [ -d "{{ .Path | dir | dir | dir }}" ]; then ./scripts/sign-macos-app.sh "{{ .Path | dir | dir | dir }}" "{{ .Version }}"; fi'

# Removed built-in notarize section - using custom post-build hooks instead
# Built-in notarization only signs the binary, not the entire app bundle

# Archive configuration
archives:
  # Linux and FreeBSD archives (standard binaries only)
  - id: unix
    ids: [catnip-no-cgo]
    name_template: "{{ .ProjectName }}_{{ .Version }}_{{ .Os }}_{{ .Arch }}{{ if .Arm }}v{{ .Arm }}{{ end }}"
    format_overrides:
      - goos: linux
        formats: [tar.gz]
      - goos: freebsd
        formats: [tar.gz]
    files:
      - README.md
      - LICENSE
      - docs/swagger.json
      - docs/swagger.yaml
    wrap_in_directory: false

  # macOS archives - use meta archives to avoid including binaries twice
  - id: macos-amd64
    ids: [catnip-macos]
    name_template: "{{ .ProjectName }}_{{ .Version }}_darwin_amd64"
    formats: [tar.gz]
    meta: true
    # Include the complete signed app bundle preserving structure
    files:
      # Copy the entire signed app bundle - keep the Catnip.app directory name
      - src: "dist/catnip-macos_darwin_amd64_v1/Catnip.app"
        dst: "Catnip.app"
      # Documentation files
      - README.md
      - LICENSE
      - docs/swagger.json
      - docs/swagger.yaml
    wrap_in_directory: false

  - id: macos-arm64
    ids: [catnip-macos]
    name_template: "{{ .ProjectName }}_{{ .Version }}_darwin_arm64"
    formats: [tar.gz]
    meta: true
    # Include the complete signed app bundle preserving structure
    files:
      # Copy the entire signed app bundle - keep the Catnip.app directory name
      - src: "dist/catnip-macos_darwin_arm64_v8.0/Catnip.app"
        dst: "Catnip.app"
      # Documentation files
      - README.md
      - LICENSE
      - docs/swagger.json
      - docs/swagger.yaml
    wrap_in_directory: false

# Checksum configuration
checksum:
  name_template: "checksums.txt"
  algorithm: sha256

# Changelog configuration
changelog:
  use: github
  sort: asc
  abbrev: 0
  groups:
    - title: "üöÄ Features"
      regexp: '^.*?feat(\([[:word:]]+\))??!?:.+$'
      order: 0
    - title: "üêõ Bug fixes"
      regexp: '^.*?fix(\([[:word:]]+\))??!?:.+$'
      order: 1
    - title: "üìö Documentation"
      regexp: '^.*?docs(\([[:word:]]+\))??!?:.+$'
      order: 2
    - title: "üèóÔ∏è Build & CI"
      regexp: '^.*?(build|ci)(\([[:word:]]+\))??!?:.+$'
      order: 3
    - title: Other
      order: 999
  filters:
    exclude:
      - "^test:"
      - "^chore:"
      - typo

# Release configuration
release:
  # Draft release for manual review
  draft: false

  # Mark as prerelease if version contains alpha, beta or rc
  prerelease: auto

  # Release name template
  name_template: "{{.ProjectName}} {{.Version}}"

  # Release header and footer
  header: |
    ## üê± Catnip CLI {{.Version}}

    Welcome to this new release of catnip!

    ### üì¶ Installation

    ```bash
    # Quick install (latest version)
    curl -sfL install.catnip.sh | sh

    # Install specific version
    curl -sfL install.catnip.sh | sh -s -- --version {{.Version}}
    ```

    **macOS Users**: The macOS version now includes native notification support through app bundle packaging. The installer will set up both the app bundle and CLI wrapper automatically.

    ### üìã What's Changed

  footer: |
    ---

    ### üîç Verification

    All binaries are signed and checksummed for security. Verify downloads with:

    ```bash
    # Download checksum file
    curl -sL https://catnip.run/v1/github/releases/download/{{.Version}}/checksums.txt

    # Verify binary (example for Linux amd64)
    sha256sum -c checksums.txt --ignore-missing
    ```

    ### üìñ Documentation

    - [Installation Guide](https://github.com/wandb/catnip#-quick-start)
    - [Usage Examples](https://github.com/wandb/catnip#-how-it-works)
    - [Contributing](https://github.com/wandb/catnip#-contributing)

    **Full Changelog**: https://github.com/wandb/catnip/compare/{{.PreviousTag}}...{{.Tag}}

# Homebrew tap (disabled for now - can be enabled later)
# brews:
#   - name: catnip
#     description: "üê± Catnip CLI - Modern containerized coding environment"
#     homepage: "https://github.com/wandb/catnip"
#     url_template: "https://github.com/wandb/catnip/releases/download/{{ .Tag }}/{{ .ArtifactName }}"
#
#     # Tap repository (you'll need to create this)
#     repository:
#       owner: wandb
#       name: homebrew-catnip
#       branch: main
#       token: "{{ .Env.HOMEBREW_TAP_GITHUB_TOKEN }}"
#
#     # Install configuration
#     install: |
#       bin.install "catnip"
#
#     # Test configuration
#     test: |
#       system "#{bin}/catnip", "--version"

# Scoop package for Windows (disabled for now - can be enabled later)
# scoops:
#   - name: catnip
#     description: "üê± Catnip CLI - Modern containerized coding environment"
#     homepage: "https://github.com/wandb/catnip"
#
#     # Scoop bucket (you'll need to create this)
#     repository:
#       owner: wandb
#       name: scoop-catnip
#       branch: main
#       token: "{{ .Env.SCOOP_BUCKET_GITHUB_TOKEN }}"

# Docker images (disabled - focusing on binaries only for catnip)
# dockers:
#   - image_templates:
#       - "ghcr.io/wandb/catnip:{{ .Version }}"
#       - "ghcr.io/wandb/catnip:latest"
#
#     dockerfile: Dockerfile.goreleaser
#
#     build_flag_templates:
#       - "--pull"
#       - "--label=org.opencontainers.image.created={{.Date}}"
#       - "--label=org.opencontainers.image.title={{.ProjectName}}"
#       - "--label=org.opencontainers.image.revision={{.FullCommit}}"
#       - "--label=org.opencontainers.image.version={{.Version}}"
#       - "--label=org.opencontainers.image.source=https://github.com/wandb/catnip"
#
#     extra_files:
#       - LICENSE
#       - README.md

# Snapcraft (disabled - for Linux snap packages, we would need to install it in our action)
# snapcrafts:
#   - name: catnip
#     title: Catnip CLI
#     summary: Modern containerized coding environment CLI
#     description: |
#       Catnip is a modern CLI tool for managing containerized coding environments
#       with interactive TUI, real-time logs, port detection, and Git integration.
#
#     grade: stable
#     confinement: strict
#
#     publish: true
#
#     apps:
#       catnip:
#         command: catnip
#         plugs: ["home", "network", "removable-media"]

# Validation rules
before:
  hooks:
    - go mod download
    - go mod tidy
    - go generate ./...
    # Frontend build!
    - sh -c "cd .. && pnpm build"
    - mkdir -p internal/assets/dist
    - sh -c "cd .. && [ -d dist ] && cp -r dist/* container/internal/assets/dist/"
    # Copy root README for archives
    - cp ../README.md ./README.md

# Clean up after release
after:
  hooks:
    - git restore README.md


# Build environment
# CGO settings are per-build now - see builds section
# Git tag configuration moved to top git section
