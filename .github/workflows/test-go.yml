name: Test Go

on:
  push:
    paths:
      - "container/**"
      - ".github/workflows/test-go.yml"

jobs:
  test:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest] # TODO: windows-latest fails tests for some reason, one day maybe...
        go-version: ["1.24"]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
          cache-dependency-path: container/go.sum

      - name: Download dependencies
        run: go mod download
        working-directory: container

      - name: Install Claude CLI for integration tests
        run: curl -fsSL https://claude.ai/install.sh | bash

      - name: Install gotestfmt for better test output (optional)
        run: go install github.com/gotesttools/gotestfmt/v2/cmd/gotestfmt@latest
        continue-on-error: true

      - name: Run tests with coverage
        run: |
          set +e  # Don't exit on test failures, we want to process the output
          go test -json -coverprofile=coverage.out -covermode=atomic ./... > test_results.json 2>&1
          TEST_EXIT_CODE=$?
          
          # Parse JSON output and show a summary
          echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
          
          # Count passed/failed tests
          PASSED=$(jq -r 'select(.Action == "pass") | select(.Test) | .Test' test_results.json 2>/dev/null | wc -l || echo "0")
          FAILED=$(jq -r 'select(.Action == "fail") | select(.Test) | .Test' test_results.json 2>/dev/null | wc -l || echo "0")
          SKIPPED=$(jq -r 'select(.Action == "skip") | select(.Test) | .Test' test_results.json 2>/dev/null | wc -l || echo "0")
          
          echo "- ✅ **Passed:** $PASSED" >> $GITHUB_STEP_SUMMARY
          echo "- ❌ **Failed:** $FAILED" >> $GITHUB_STEP_SUMMARY  
          echo "- ⏭️ **Skipped:** $SKIPPED" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Show failed tests with details if any
          if [ "$FAILED" -gt 0 ]; then
            echo "### ❌ Failed Tests" >> $GITHUB_STEP_SUMMARY
            jq -r 'select(.Action == "fail") | select(.Test) | "- **" + .Package + "/" + .Test + "**"' test_results.json 2>/dev/null >> $GITHUB_STEP_SUMMARY || true
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # Show failure details
            echo "### Failure Details" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            jq -r 'select(.Action == "output") | select(.Output | contains("FAIL:") or contains("Error:") or contains("panic:")) | .Output' test_results.json 2>/dev/null >> $GITHUB_STEP_SUMMARY || true
            echo '```' >> $GITHUB_STEP_SUMMARY
            
            # Create GitHub annotations for failures
            jq -r 'select(.Action == "fail") | select(.Test) | "::error title=Test Failed::" + .Package + "/" + .Test' test_results.json 2>/dev/null || true
          fi
          
          # Also output in a more readable format to console
          if command -v gotestfmt >/dev/null 2>&1; then
            cat test_results.json | gotestfmt
          else
            # Fallback: show compact output
            jq -r 'select(.Action == "pass") | select(.Package) | select(.Test | not) | "✅ " + .Package' test_results.json 2>/dev/null || true
            jq -r 'select(.Action == "fail") | select(.Package) | select(.Test | not) | "❌ " + .Package' test_results.json 2>/dev/null || true
            jq -r 'select(.Action == "fail") | select(.Test) | "  ❌ " + .Test' test_results.json 2>/dev/null || true
          fi
          
          exit $TEST_EXIT_CODE
        working-directory: container

      - name: Display coverage summary
        run: |
          echo "## Coverage Summary" >> $GITHUB_STEP_SUMMARY
          COVERAGE=$(go tool cover -func=coverage.out | grep "total:" | awk '{print $3}')
          echo "**Total Coverage: $COVERAGE**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Show just the total - no need for noisy per-function details
          echo "For detailed coverage report, check the uploaded coverage artifacts or run locally:" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo 'go tool cover -html=coverage.out -o coverage.html' >> $GITHUB_STEP_SUMMARY  
          echo '```' >> $GITHUB_STEP_SUMMARY
        working-directory: container

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        if: matrix.os == 'ubuntu-latest' && matrix.go-version == '1.24'
        with:
          files: container/coverage.out
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Coverage Badge
        uses: tj-actions/coverage-badge-go@v2
        if: matrix.os == 'ubuntu-latest' && matrix.go-version == '1.24'
        with:
          filename: container/coverage.out

      - name: Run go vet
        run: go vet ./...
        working-directory: container

      - name: Build Catnip
        run: go build -o bin/catnip ./cmd/cli/main.go
        working-directory: container

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24"
          cache-dependency-path: container/go.sum

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v8.0.0
        with:
          version: latest
          working-directory: container
          args: --verbose

  goreleaser-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24"
          cache-dependency-path: container/go.sum

      - name: Check GoReleaser config
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser-pro
          version: "~> v2"
          args: check
          workdir: container
        env:
          GORELEASER_KEY: ${{ secrets.GORELEASER_KEY }}
