name: Release

on:
  push:
    tags:
      - "v*"

permissions:
  contents: write
  # packages: write  # Not needed without Docker images

jobs:
  goreleaser:
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24"
          cache-dependency-path: container/go.sum

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Install frontend dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup keychain for signing and notarization
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/goreleaser.p12
          KEY_PATH=$RUNNER_TEMP/goreleaser.p8
          KEYCHAIN_PATH=$RUNNER_TEMP/goreleaser.keychain-db

          # import certificate and key from secrets
          echo -n "$MACOS_SIGN_P12" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$MACOS_NOTARY_KEY" | base64 --decode -o $KEY_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$MACOS_SIGN_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # create notary profile
          xcrun notarytool store-credentials "$MACOS_NOTARY_PROFILE_NAME" \
            --key "$KEY_PATH" \
            --key-id "$MACOS_NOTARY_KEY_ID" \
            --issuer "$MACOS_NOTARY_ISSUER_ID" \
            --keychain $KEYCHAIN_PATH

          # export the keychain path
          echo "KEYCHAIN_PATH=$KEYCHAIN_PATH" >>$GITHUB_ENV
        env:
          MACOS_SIGN_P12: ${{ secrets.CERT_P12_BASE64 }}
          MACOS_SIGN_PASSWORD: ${{ secrets.CERT_PASSWORD }}
          MACOS_NOTARY_KEY: ${{ secrets.APPLE_PRIVATE_KEY }}
          MACOS_NOTARY_KEY_ID: ${{ vars.APPLE_KEY_ID }}
          MACOS_NOTARY_ISSUER_ID: ${{ vars.APPLE_ISSUER_ID }}
          MACOS_NOTARY_PROFILE_NAME: "catnip-notary"
          KEYCHAIN_PASSWORD: "temp-keychain-password"

      # Docker setup removed - focusing on binaries only for catnip
      # - name: Set up Docker Buildx
      #   uses: docker/setup-buildx-action@v3

      # - name: Log in to GitHub Container Registry
      #   uses: docker/login-action@v3
      #   with:
      #     registry: ghcr.io
      #     username: ${{ github.actor }}
      #     password: ${{ secrets.GITHUB_TOKEN }}

      - name: Change to container directory
        run: cd container

      - name: Install Wrangler
        run: npm install -g wrangler

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser-pro
          version: "~> v2"
          args: release --clean
          workdir: container
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GORELEASER_KEY: ${{ secrets.GORELEASER_KEY }}
          APPLE_ID: ${{ vars.APPLE_ID }}
          APPLE_SIGN_P12: ${{ secrets.CERT_P12_BASE64 }}
          APPLE_SIGN_PASSWORD: ${{ secrets.CERT_PASSWORD }}
          APPLE_KEY_ID: ${{ vars.APPLE_KEY_ID }}
          APPLE_PRIVATE_KEY: ${{ secrets.APPLE_PRIVATE_KEY }}
          APPLE_ISSUER_ID: ${{ vars.APPLE_ISSUER_ID }}
          APPLE_TEAM_ID: ${{ vars.APPLE_TEAM_ID }}
          KEYCHAIN_PATH: ${{ env.KEYCHAIN_PATH }}
          MACOS_NOTARY_PROFILE_NAME: "catnip-notary"

          # HOMEBREW_TAP_GITHUB_TOKEN: ${{ secrets.HOMEBREW_TAP_GITHUB_TOKEN }}  # Disabled for now
          # SCOOP_BUCKET_GITHUB_TOKEN: ${{ secrets.SCOOP_BUCKET_GITHUB_TOKEN }}  # Disabled for now

      - name: Upload release assets to R2
        run: |
          chmod +x .github/scripts/upload-to-r2.sh
          env
          .github/scripts/upload-to-r2.sh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ vars.CLOUDFLARE_ACCOUNT_ID }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          R2_BUCKET_NAME: ${{ vars.R2_BUCKET_NAME }}
