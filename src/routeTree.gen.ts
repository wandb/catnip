/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as GitRouteImport } from './routes/git'
import { Route as DocsRouteImport } from './routes/docs'
import { Route as IndexRouteImport } from './routes/index'
import { Route as WorkspaceIndexRouteImport } from './routes/workspace.index'
import { Route as TranscriptIndexRouteImport } from './routes/transcript.index'
import { Route as TerminalIndexRouteImport } from './routes/terminal.index'
import { Route as WorkspaceReposRouteImport } from './routes/workspace.repos'
import { Route as WorkspaceNewRouteImport } from './routes/workspace.new'
import { Route as TranscriptDemoRouteImport } from './routes/transcript.demo'
import { Route as TranscriptSessionIdRouteImport } from './routes/transcript.$sessionId'
import { Route as TerminalSessionIdRouteImport } from './routes/terminal.$sessionId'
import { Route as PreviewPortRouteImport } from './routes/preview.$port'
import { Route as GhSplatRouteImport } from './routes/gh.$'
import { Route as WorkspaceProjectWorkspaceRouteImport } from './routes/workspace.$project.$workspace'

const GitRoute = GitRouteImport.update({
  id: '/git',
  path: '/git',
  getParentRoute: () => rootRouteImport,
} as any)
const DocsRoute = DocsRouteImport.update({
  id: '/docs',
  path: '/docs',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const WorkspaceIndexRoute = WorkspaceIndexRouteImport.update({
  id: '/workspace/',
  path: '/workspace/',
  getParentRoute: () => rootRouteImport,
} as any)
const TranscriptIndexRoute = TranscriptIndexRouteImport.update({
  id: '/transcript/',
  path: '/transcript/',
  getParentRoute: () => rootRouteImport,
} as any)
const TerminalIndexRoute = TerminalIndexRouteImport.update({
  id: '/terminal/',
  path: '/terminal/',
  getParentRoute: () => rootRouteImport,
} as any)
const WorkspaceReposRoute = WorkspaceReposRouteImport.update({
  id: '/workspace/repos',
  path: '/workspace/repos',
  getParentRoute: () => rootRouteImport,
} as any)
const WorkspaceNewRoute = WorkspaceNewRouteImport.update({
  id: '/workspace/new',
  path: '/workspace/new',
  getParentRoute: () => rootRouteImport,
} as any)
const TranscriptDemoRoute = TranscriptDemoRouteImport.update({
  id: '/transcript/demo',
  path: '/transcript/demo',
  getParentRoute: () => rootRouteImport,
} as any)
const TranscriptSessionIdRoute = TranscriptSessionIdRouteImport.update({
  id: '/transcript/$sessionId',
  path: '/transcript/$sessionId',
  getParentRoute: () => rootRouteImport,
} as any)
const TerminalSessionIdRoute = TerminalSessionIdRouteImport.update({
  id: '/terminal/$sessionId',
  path: '/terminal/$sessionId',
  getParentRoute: () => rootRouteImport,
} as any)
const PreviewPortRoute = PreviewPortRouteImport.update({
  id: '/preview/$port',
  path: '/preview/$port',
  getParentRoute: () => rootRouteImport,
} as any)
const GhSplatRoute = GhSplatRouteImport.update({
  id: '/gh/$',
  path: '/gh/$',
  getParentRoute: () => rootRouteImport,
} as any)
const WorkspaceProjectWorkspaceRoute =
  WorkspaceProjectWorkspaceRouteImport.update({
    id: '/workspace/$project/$workspace',
    path: '/workspace/$project/$workspace',
    getParentRoute: () => rootRouteImport,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/docs': typeof DocsRoute
  '/git': typeof GitRoute
  '/gh/$': typeof GhSplatRoute
  '/preview/$port': typeof PreviewPortRoute
  '/terminal/$sessionId': typeof TerminalSessionIdRoute
  '/transcript/$sessionId': typeof TranscriptSessionIdRoute
  '/transcript/demo': typeof TranscriptDemoRoute
  '/workspace/new': typeof WorkspaceNewRoute
  '/workspace/repos': typeof WorkspaceReposRoute
  '/terminal': typeof TerminalIndexRoute
  '/transcript': typeof TranscriptIndexRoute
  '/workspace': typeof WorkspaceIndexRoute
  '/workspace/$project/$workspace': typeof WorkspaceProjectWorkspaceRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/docs': typeof DocsRoute
  '/git': typeof GitRoute
  '/gh/$': typeof GhSplatRoute
  '/preview/$port': typeof PreviewPortRoute
  '/terminal/$sessionId': typeof TerminalSessionIdRoute
  '/transcript/$sessionId': typeof TranscriptSessionIdRoute
  '/transcript/demo': typeof TranscriptDemoRoute
  '/workspace/new': typeof WorkspaceNewRoute
  '/workspace/repos': typeof WorkspaceReposRoute
  '/terminal': typeof TerminalIndexRoute
  '/transcript': typeof TranscriptIndexRoute
  '/workspace': typeof WorkspaceIndexRoute
  '/workspace/$project/$workspace': typeof WorkspaceProjectWorkspaceRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/docs': typeof DocsRoute
  '/git': typeof GitRoute
  '/gh/$': typeof GhSplatRoute
  '/preview/$port': typeof PreviewPortRoute
  '/terminal/$sessionId': typeof TerminalSessionIdRoute
  '/transcript/$sessionId': typeof TranscriptSessionIdRoute
  '/transcript/demo': typeof TranscriptDemoRoute
  '/workspace/new': typeof WorkspaceNewRoute
  '/workspace/repos': typeof WorkspaceReposRoute
  '/terminal/': typeof TerminalIndexRoute
  '/transcript/': typeof TranscriptIndexRoute
  '/workspace/': typeof WorkspaceIndexRoute
  '/workspace/$project/$workspace': typeof WorkspaceProjectWorkspaceRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/docs'
    | '/git'
    | '/gh/$'
    | '/preview/$port'
    | '/terminal/$sessionId'
    | '/transcript/$sessionId'
    | '/transcript/demo'
    | '/workspace/new'
    | '/workspace/repos'
    | '/terminal'
    | '/transcript'
    | '/workspace'
    | '/workspace/$project/$workspace'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/docs'
    | '/git'
    | '/gh/$'
    | '/preview/$port'
    | '/terminal/$sessionId'
    | '/transcript/$sessionId'
    | '/transcript/demo'
    | '/workspace/new'
    | '/workspace/repos'
    | '/terminal'
    | '/transcript'
    | '/workspace'
    | '/workspace/$project/$workspace'
  id:
    | '__root__'
    | '/'
    | '/docs'
    | '/git'
    | '/gh/$'
    | '/preview/$port'
    | '/terminal/$sessionId'
    | '/transcript/$sessionId'
    | '/transcript/demo'
    | '/workspace/new'
    | '/workspace/repos'
    | '/terminal/'
    | '/transcript/'
    | '/workspace/'
    | '/workspace/$project/$workspace'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DocsRoute: typeof DocsRoute
  GitRoute: typeof GitRoute
  GhSplatRoute: typeof GhSplatRoute
  PreviewPortRoute: typeof PreviewPortRoute
  TerminalSessionIdRoute: typeof TerminalSessionIdRoute
  TranscriptSessionIdRoute: typeof TranscriptSessionIdRoute
  TranscriptDemoRoute: typeof TranscriptDemoRoute
  WorkspaceNewRoute: typeof WorkspaceNewRoute
  WorkspaceReposRoute: typeof WorkspaceReposRoute
  TerminalIndexRoute: typeof TerminalIndexRoute
  TranscriptIndexRoute: typeof TranscriptIndexRoute
  WorkspaceIndexRoute: typeof WorkspaceIndexRoute
  WorkspaceProjectWorkspaceRoute: typeof WorkspaceProjectWorkspaceRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/git': {
      id: '/git'
      path: '/git'
      fullPath: '/git'
      preLoaderRoute: typeof GitRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/docs': {
      id: '/docs'
      path: '/docs'
      fullPath: '/docs'
      preLoaderRoute: typeof DocsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/workspace/': {
      id: '/workspace/'
      path: '/workspace'
      fullPath: '/workspace'
      preLoaderRoute: typeof WorkspaceIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/transcript/': {
      id: '/transcript/'
      path: '/transcript'
      fullPath: '/transcript'
      preLoaderRoute: typeof TranscriptIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/terminal/': {
      id: '/terminal/'
      path: '/terminal'
      fullPath: '/terminal'
      preLoaderRoute: typeof TerminalIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/workspace/repos': {
      id: '/workspace/repos'
      path: '/workspace/repos'
      fullPath: '/workspace/repos'
      preLoaderRoute: typeof WorkspaceReposRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/workspace/new': {
      id: '/workspace/new'
      path: '/workspace/new'
      fullPath: '/workspace/new'
      preLoaderRoute: typeof WorkspaceNewRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/transcript/demo': {
      id: '/transcript/demo'
      path: '/transcript/demo'
      fullPath: '/transcript/demo'
      preLoaderRoute: typeof TranscriptDemoRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/transcript/$sessionId': {
      id: '/transcript/$sessionId'
      path: '/transcript/$sessionId'
      fullPath: '/transcript/$sessionId'
      preLoaderRoute: typeof TranscriptSessionIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/terminal/$sessionId': {
      id: '/terminal/$sessionId'
      path: '/terminal/$sessionId'
      fullPath: '/terminal/$sessionId'
      preLoaderRoute: typeof TerminalSessionIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/preview/$port': {
      id: '/preview/$port'
      path: '/preview/$port'
      fullPath: '/preview/$port'
      preLoaderRoute: typeof PreviewPortRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/gh/$': {
      id: '/gh/$'
      path: '/gh/$'
      fullPath: '/gh/$'
      preLoaderRoute: typeof GhSplatRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/workspace/$project/$workspace': {
      id: '/workspace/$project/$workspace'
      path: '/workspace/$project/$workspace'
      fullPath: '/workspace/$project/$workspace'
      preLoaderRoute: typeof WorkspaceProjectWorkspaceRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DocsRoute: DocsRoute,
  GitRoute: GitRoute,
  GhSplatRoute: GhSplatRoute,
  PreviewPortRoute: PreviewPortRoute,
  TerminalSessionIdRoute: TerminalSessionIdRoute,
  TranscriptSessionIdRoute: TranscriptSessionIdRoute,
  TranscriptDemoRoute: TranscriptDemoRoute,
  WorkspaceNewRoute: WorkspaceNewRoute,
  WorkspaceReposRoute: WorkspaceReposRoute,
  TerminalIndexRoute: TerminalIndexRoute,
  TranscriptIndexRoute: TranscriptIndexRoute,
  WorkspaceIndexRoute: WorkspaceIndexRoute,
  WorkspaceProjectWorkspaceRoute: WorkspaceProjectWorkspaceRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
