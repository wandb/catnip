// @ts-check
// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

/**
 * GitDesktopService wraps the existing Git service for Wails exposure
 * @module
 */

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import { Call as $Call, CancellablePromise as $CancellablePromise, Create as $Create } from "@wailsio/runtime";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as models$0 from "../catnip/internal/models/models.js";

/**
 * CreateWorktree creates a new git worktree
 * @param {string} repoID
 * @param {string} branch
 * @param {string} directory
 * @returns {$CancellablePromise<models$0.Worktree | null>}
 */
export function CreateWorktree(repoID, branch, directory) {
    return $Call.ByID(3772902208, repoID, branch, directory).then(/** @type {($result: any) => any} */(($result) => {
        return $$createType1($result);
    }));
}

/**
 * DeleteWorktree deletes a git worktree
 * @param {string} worktreeID
 * @returns {$CancellablePromise<void>}
 */
export function DeleteWorktree(worktreeID) {
    return $Call.ByID(2453074227, worktreeID);
}

/**
 * GetAllWorktrees gets all git worktrees
 * @returns {$CancellablePromise<(models$0.Worktree | null)[]>}
 */
export function GetAllWorktrees() {
    return $Call.ByID(740058296).then(/** @type {($result: any) => any} */(($result) => {
        return $$createType2($result);
    }));
}

/**
 * GetGitStatus gets overall git status
 * @returns {$CancellablePromise<models$0.GitStatus | null>}
 */
export function GetGitStatus() {
    return $Call.ByID(2234240039).then(/** @type {($result: any) => any} */(($result) => {
        return $$createType4($result);
    }));
}

/**
 * GetRepositories gets all repositories
 * @returns {$CancellablePromise<(models$0.Repository | null)[]>}
 */
export function GetRepositories() {
    return $Call.ByID(3286578619).then(/** @type {($result: any) => any} */(($result) => {
        return $$createType7($result);
    }));
}

/**
 * GetWorktree gets a specific worktree by ID
 * @param {string} worktreeID
 * @returns {$CancellablePromise<models$0.Worktree | null>}
 */
export function GetWorktree(worktreeID) {
    return $Call.ByID(867174590, worktreeID).then(/** @type {($result: any) => any} */(($result) => {
        return $$createType1($result);
    }));
}

// Private type creation functions
const $$createType0 = models$0.Worktree.createFrom;
const $$createType1 = $Create.Nullable($$createType0);
const $$createType2 = $Create.Array($$createType1);
const $$createType3 = models$0.GitStatus.createFrom;
const $$createType4 = $Create.Nullable($$createType3);
const $$createType5 = models$0.Repository.createFrom;
const $$createType6 = $Create.Nullable($$createType5);
const $$createType7 = $Create.Array($$createType6);
