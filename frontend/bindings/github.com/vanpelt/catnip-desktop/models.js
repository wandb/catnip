// @ts-check
// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import { Create as $Create } from "@wailsio/runtime";

/**
 * AppSettings represents desktop app settings
 */
export class AppSettings {
    /**
     * Creates a new AppSettings instance.
     * @param {Partial<AppSettings>} [$$source = {}] - The source object to create the AppSettings.
     */
    constructor($$source = {}) {
        if (!("theme" in $$source)) {
            /**
             * "light", "dark", "system"
             * @member
             * @type {string}
             */
            this["theme"] = "";
        }
        if (!("windowPosition" in $$source)) {
            /**
             * Last window position
             * @member
             * @type {Point}
             */
            this["windowPosition"] = (new Point());
        }
        if (!("windowSize" in $$source)) {
            /**
             * Last window size
             * @member
             * @type {Size}
             */
            this["windowSize"] = (new Size());
        }
        if (!("autoStart" in $$source)) {
            /**
             * Start on system boot
             * @member
             * @type {boolean}
             */
            this["autoStart"] = false;
        }
        if (!("minimizeToTray" in $$source)) {
            /**
             * Minimize to system tray
             * @member
             * @type {boolean}
             */
            this["minimizeToTray"] = false;
        }
        if (!("closeToTray" in $$source)) {
            /**
             * Close to system tray
             * @member
             * @type {boolean}
             */
            this["closeToTray"] = false;
        }
        if (!("showNotifications" in $$source)) {
            /**
             * Show desktop notifications
             * @member
             * @type {boolean}
             */
            this["showNotifications"] = false;
        }
        if (!("defaultProjectPath" in $$source)) {
            /**
             * Default path for new projects
             * @member
             * @type {string}
             */
            this["defaultProjectPath"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new AppSettings instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {AppSettings}
     */
    static createFrom($$source = {}) {
        const $$createField1_0 = $$createType0;
        const $$createField2_0 = $$createType1;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("windowPosition" in $$parsedSource) {
            $$parsedSource["windowPosition"] = $$createField1_0($$parsedSource["windowPosition"]);
        }
        if ("windowSize" in $$parsedSource) {
            $$parsedSource["windowSize"] = $$createField2_0($$parsedSource["windowSize"]);
        }
        return new AppSettings(/** @type {Partial<AppSettings>} */($$parsedSource));
    }
}

export class Point {
    /**
     * Creates a new Point instance.
     * @param {Partial<Point>} [$$source = {}] - The source object to create the Point.
     */
    constructor($$source = {}) {
        if (!("x" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["x"] = 0;
        }
        if (!("y" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["y"] = 0;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Point instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {Point}
     */
    static createFrom($$source = {}) {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new Point(/** @type {Partial<Point>} */($$parsedSource));
    }
}

export class Size {
    /**
     * Creates a new Size instance.
     * @param {Partial<Size>} [$$source = {}] - The source object to create the Size.
     */
    constructor($$source = {}) {
        if (!("width" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["width"] = 0;
        }
        if (!("height" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["height"] = 0;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Size instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {Size}
     */
    static createFrom($$source = {}) {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new Size(/** @type {Partial<Size>} */($$parsedSource));
    }
}

// Private type creation functions
const $$createType0 = Point.createFrom;
const $$createType1 = Size.createFrom;
